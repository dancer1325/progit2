[[_git_stashing]]
=== Stashing and Cleaning

* use cases
    ** you've been working about part of your project & you need to switch branches / you do NOT want to do a commit of half-done work

* how does it work?
    ** your modified tracked files & staged changes -- are saved them -- | stack of unfinished changes / you can reapply | any time & any branch

* `git stash save`
    ** -- is going to be migrated to -> `git stash push`
        *** == `git stash save` is being deprecated
        ** Reason: üß†`git stash push` allows stashing selected _pathspecs_ / NOT supported by `git stash save` üß†

* `git stash apply stashName`
    ** reapply the stash / stored
        *** if anything no longer applies cleanly -> Git could give you merge conflicts
    ** üëÅÔ∏è if you do NOT specify "stashName" -> last stash stored is applied üëÅÔ∏è
    ** `... --index`
        *** restage the previous staged files
        *** ‚ö†Ô∏èby default, staged files are NOT restaged ‚ö†Ô∏è

* `git stash drop stashName`
    ** remove the stashName from the stack

* `git stash pop`
    ** == `git stash apply` + `git stash drop`
        *** == reapply the last stage & remove it from the stack

* _Example:_ demonstrate stashing
    ** work | your project / stage 1 of the changes
    ** `git status`, checking the dirty state

    [source,console]
    ----
    $ git status
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)

        modified:   index.html

    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   lib/simplegit.rb
    ----

    ** you want to switch branches BUT you do NOT want to commit yet -> run `git stash` or `git stash push`

    [source,console]
    ----
    $ git stash
    Saved working directory and index state \
      "WIP on master: 049d078 Create index file"
    HEAD is now at 049d078 Create index file
    (To restore them type "git stash apply")
    ----

    ** now, working directory is clean

    [source,console]
    ----
    $ git status
    # On branch master
    nothing to commit, working directory clean
    ----

    ** you can switch branches & do work
    ** `git stash list`, to check the stashes / stored

    [source,console]
    ----
    $ git stash list
    stash@{0}: WIP on master: 049d078 Create index file
    stash@{1}: WIP on master: c264051 Revert "Add file_size"
    stash@{2}: WIP on master: 21d80a5 Add number to log
    ----

    ** ways to apply some stored stashed
        *** `git stash apply` -> reapply the last one / stashed
        *** `git stash apply stashName` -- `git stash apply stash@{2}` -> reapply specific stashed one

    [source,console]
    ----
    $ git stash apply
    On branch master
    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   index.html
        modified:   lib/simplegit.rb

    no changes added to commit (use "git add" and/or "git commit -a")
    ----

        *** `git stash apply --index` -> reapply stashed changes & restage, staged files

    [source,console]
    ----
    $ git stash apply --index
    On branch master
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)

        modified:   index.html

    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   lib/simplegit.rb
    ----

    ** `git stash drop stashName`, to remove the stashName from the stack

    [source,console]
    ----
    $ git stash list
    stash@{0}: WIP on master: 049d078 Create index file
    stash@{1}: WIP on master: c264051 Revert "Add file_size"
    stash@{2}: WIP on master: 21d80a5 Add number to log
    $ git stash drop stash@{0}
    Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)
    ----

==== Creative Stashing

* `--keep-index`
    ** := option / include ALL staged content | stash + leave the staged | the index
    ** _Example:_

    [source,console]
    ----
    $ git status -s
    M  index.html
     M lib/simplegit.rb

    $ git stash --keep-index
    Saved working directory and index state WIP on master: 1b65b17 added the index file
    HEAD is now at 1b65b17 added the index file

    $ git status -s
    M  index.html
    ----

* `--include-untracked` or `-u`
    ** := option / include üëÅÔ∏è ALSO untracked / != ignored files üëÅÔ∏è
    ** `git stash` stash JUST modified files + staged tracked files
    ** _Example:_

    [source,console]
    ----
    $ git status -s
    M  index.html
     M lib/simplegit.rb
    ?? new-file.txt

    $ git stash -u
    Saved working directory and index state WIP on master: 1b65b17 added the index file
    HEAD is now at 1b65b17 added the index file

    $ git status -s
    $
    ----

* `--all` or `-a`
    ** := option / include üëÅÔ∏è ALL (also ignoring) files üëÅÔ∏è

* `--patch`
    ** := option / prompt you interactively to choose which ones to stash
    ** _Example:_

    [source,console]
    ----
    $ git stash --patch
    diff --git a/lib/simplegit.rb b/lib/simplegit.rb
    index 66d332e..8bb5674 100644
    --- a/lib/simplegit.rb
    +++ b/lib/simplegit.rb
    @@ -16,6 +16,10 @@ class SimpleGit
             return `#{git_cmd} 2>&1`.chomp
           end
         end
    +
    +    def show(treeish = 'master')
    +      command("git show #{treeish}")
    +    end

     end
     test
    Stash this hunk [y,n,q,a,d,/,e,?]? y

    Saved working directory and index state WIP on master: 1b65b17 added the index file
    ----

==== Creating a Branch from a Stash

* `git stash branch newBranchName`
    ** what does it do?
        *** creates a new branch
        *** checkout the commit / you were | making the stash
        *** reapplies your work
        *** if it's applied correctly -> drop the stash
    ** use cases
        *** reapply a stashed change
    ** _Example:_

    [source,console]
    ----
    $ git stash branch testchanges
    M	index.html
    M	lib/simplegit.rb
    Switched to a new branch 'testchanges'
    On branch testchanges
    Changes to be committed:
      (use "git reset HEAD <file>..." to unstage)

        modified:   index.html

    Changes not staged for commit:
      (use "git add <file>..." to update what will be committed)
      (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   lib/simplegit.rb

    Dropped refs/stash@{0} (29d385a81d163dfd45a452a2ce816487a6b8b014)
    ----

[[_git_clean]]
==== Cleaning your Working Directory

* `git clean`
    ** use cases
        *** get rid of some stashes
    ** purpose
        *** remove files | your working directory / are NOT tracked (!= ignored)
    ** NO way to retrieve them
    ** vs `git stash --all`
        *** `stash` does NOT remove it, BUT save it | a stash
    ** `git clean -f -d`
        *** remove ALL the untracked files + subdirectories | your working directory
        *** `-f` == 'force'
            **** if Git configuration variable `clean.requireForce = false` -> required to pass
    ** `--dry-run` or `-n`
        *** display what it would do
    ** _Example:_

    [source,console]
    ----
    $ git clean -d -n
    Would remove test.o
    Would remove tmp/
    ----

    ** `git clean -x`
        *** `git clean` + remove ALSO ignored files | your working directory
        *** _Example:_

    [source,console]
    ----
    $ git status -s
     M lib/simplegit.rb
    ?? build.TMP
    ?? tmp/

    $ git clean -n -d
    Would remove build.TMP
    Would remove tmp/

    $ git clean -n -d -x
    Would remove build.TMP
    Would remove test.o
    Would remove tmp/
    ----

    ** `git clean -i`
        *** check interactively what to remove
        *** _Example:_

    [source,console]
    ----
    $ git clean -x -i
    Would remove the following items:
      build.TMP  test.o
    *** Commands ***
        1: clean                2: filter by pattern    3: select by numbers    4: ask each             5: quit
        6: help
    What now>
    ----

    ** if your working directory have been copied or cloned & you want to force the clean -> `git clean -ff`
