[[_first_time]]
=== First-Time Git Setup

* goal
    ** customize your Git environment
        *** recommendations
            **** do it 1! | your computer == stick between upgrades
        *** ways
            **** statically | a file
            **** dynamically -- through -- the commands

* `git config`
    ** := tool /
        *** allows, about configuration variables,
            **** getting them
            **** set them
    ** `git config --list --show-origin`
        *** view ALL your settings / indicate where they come from

* configuration variables
    ** control how Git looks & operates
    ** can be stored | 3 different places / ordered from lower to higher priority
        *** `[path]/etc/gitconfig`
            **** system configuration file -> you need admin rights
            **** 👁️ -- apply to -- EVERY user | system & ALL their repositories 👁️
            **** `--system` | `git config` command -> reads and writes -- from -- this file specifically
            **** if Windows -> Git looks for it | MSys root
        *** `~/.gitconfig` or `~/.config/git/config`
            **** 👁️ -- apply specifically to -- your user & ALL your repositories 👁️
            **** `--global` | `git config` command -> reads and writes -- from -- this file specifically
            **** if Windows -> Git looks for it | `$HOME` (== `C:\Users\$USER` -- for most of -- Windows users)
        *** `.git/config` | specific Git directory
            **** 👁️-- apply to -- 1! specific Git repository 👁️
            **** `--local` | `git config` command -> reads and writes -- from -- this file specifically
                ***** default -> NOT necessary to pass it to the command
                ***** -> you need to run the command | specific Git repository
        *** specific system-level config file | Windows & Git v2.x
            **** `C:\Documents and Settings\All Users\Application Data\Git\config` | Windows XP
            **** `C:\ProgramData\Git\config` | Windows Vista & newer
            **** `-f` | `git config` command -> change it specifically

==== Your Identity

* TODO:
The first thing you should do when you install Git is to set your user name and email address.
This is important because every Git commit uses this information, and it's immutably baked into the commits you start creating:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Again, you need to do this only once if you pass the `--global` option, because then Git will always use that information for anything you do on that system.
If you want to override this with a different name or email address for specific projects, you can run the command without the `--global` option when you're in that project.

Many of the GUI tools will help you do this when you first run them.

[[_editor]]
==== Your Editor

Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message.
If not configured, Git uses your system's default editor.

If you want to use a different text editor, such as Emacs, you can do the following:

[source,console]
----
$ git config --global core.editor emacs
----

On a Windows system, if you want to use a different text editor, you must specify the full path to its executable file.
This can be different depending on how your editor is packaged.

In the case of Notepad++, a popular programming editor, you are likely to want to use the 32-bit version, since at the time of writing the 64-bit version doesn't support all plug-ins.
If you are on a 32-bit Windows system, or you have a 64-bit editor on a 64-bit system, you'll type something like this:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
----

[NOTE]
====
Vim, Emacs and Notepad++ are popular text editors often used by developers on Unix-based systems like Linux and macOS or a Windows system.
If you are using another editor, or a 32-bit version, please find specific instructions for how to set up your favorite editor with Git in <<C-git-commands#ch_core_editor>>.
====

[WARNING]
====
You may find, if you don't setup your editor like this, you get into a really confusing state when Git attempts to launch it.
An example on a Windows system may include a prematurely terminated Git operation during a Git initiated edit.
====

[[_new_default_branch]]
==== Your default branch name

By default Git will create a branch called _master_ when you create a new repository with `git init`.
From Git version 2.28 onwards, you can set a different name for the initial branch.

To set _main_ as the default branch name do:

[source,console]
----
$ git config --global init.defaultBranch main
----

==== Checking Your Settings

If you want to check your configuration settings, you can use the `git config --list` command to list all the settings Git can find at that point:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

You may see keys more than once, because Git reads the same key from different files (`[path]/etc/gitconfig` and `~/.gitconfig`, for example).
In this case, Git uses the last value for each unique key it sees.

You can also check what Git thinks a specific key's value is by typing `git config <key>`:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Since Git might read the same configuration variable value from more than one file, it's possible that you have an unexpected value for one of these values and you don't know why.
In cases like that, you can query Git as to the _origin_ for that value, and it will tell you which configuration file had the final say in setting that value:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
